# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import vision_pb2 as vision__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in vision_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VisionServiceStub(object):
    """Yüz tanıma servisi - sadece yüz tespiti ve izleme yapar
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeFrame = channel.unary_unary(
                '/vision.VisionService/AnalyzeFrame',
                request_serializer=vision__pb2.FrameRequest.SerializeToString,
                response_deserializer=vision__pb2.VisionResponse.FromString,
                _registered_method=True)


class VisionServiceServicer(object):
    """Yüz tanıma servisi - sadece yüz tespiti ve izleme yapar
    """

    def AnalyzeFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeFrame,
                    request_deserializer=vision__pb2.FrameRequest.FromString,
                    response_serializer=vision__pb2.VisionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.VisionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.VisionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VisionService(object):
    """Yüz tanıma servisi - sadece yüz tespiti ve izleme yapar
    """

    @staticmethod
    def AnalyzeFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.VisionService/AnalyzeFrame',
            vision__pb2.FrameRequest.SerializeToString,
            vision__pb2.VisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EmotionServiceStub(object):
    """Duygu analiz servisi - tespit edilen yüzlerin duygularını analiz eder
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeEmotion = channel.unary_unary(
                '/vision.EmotionService/AnalyzeEmotion',
                request_serializer=vision__pb2.FaceRequest.SerializeToString,
                response_deserializer=vision__pb2.EmotionResponse.FromString,
                _registered_method=True)


class EmotionServiceServicer(object):
    """Duygu analiz servisi - tespit edilen yüzlerin duygularını analiz eder
    """

    def AnalyzeEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmotionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeEmotion,
                    request_deserializer=vision__pb2.FaceRequest.FromString,
                    response_serializer=vision__pb2.EmotionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.EmotionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.EmotionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EmotionService(object):
    """Duygu analiz servisi - tespit edilen yüzlerin duygularını analiz eder
    """

    @staticmethod
    def AnalyzeEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.EmotionService/AnalyzeEmotion',
            vision__pb2.FaceRequest.SerializeToString,
            vision__pb2.EmotionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SpeechDetectionServiceStub(object):
    """Konuşma tespit servisi - kişinin konuşup konuşmadığını belirler
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectSpeech = channel.unary_unary(
                '/vision.SpeechDetectionService/DetectSpeech',
                request_serializer=vision__pb2.FaceRequest.SerializeToString,
                response_deserializer=vision__pb2.SpeechResponse.FromString,
                _registered_method=True)


class SpeechDetectionServiceServicer(object):
    """Konuşma tespit servisi - kişinin konuşup konuşmadığını belirler
    """

    def DetectSpeech(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectSpeech,
                    request_deserializer=vision__pb2.FaceRequest.FromString,
                    response_serializer=vision__pb2.SpeechResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.SpeechDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.SpeechDetectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SpeechDetectionService(object):
    """Konuşma tespit servisi - kişinin konuşup konuşmadığını belirler
    """

    @staticmethod
    def DetectSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SpeechDetectionService/DetectSpeech',
            vision__pb2.FaceRequest.SerializeToString,
            vision__pb2.SpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
